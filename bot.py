import telebot

from telebot.types import Message, ReplyKeyboardRemove

from config import TOKEN, MAX_USER_TTS_SYMBOLS, MAX_TTS_SYMBOLS, ADMINS, LOGS_PATH, MAX_USERS
from utils import create_keyboard, logging

from database import create_table, create_db, add_user, insert_row, count_all_symbol, is_user_in_db, get_all_users_data

from speechkit import text_to_speech

bot = telebot.TeleBot(TOKEN)

create_db()
create_table()


@bot.message_handler(commands=["start"])
def start(message):
    user_name = message.from_user.username
    user_id = message.chat.id

    if not is_user_in_db(user_id):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –Ω–µ—Ç
        if len(get_all_users_data()) < MAX_USERS:  # –ï—Å–ª–∏ —á–∏—Å–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
            add_user(
                user_id=int(user_id),
                message="",
                tts_symbols=0
            )
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:("

            bot.send_message(
                chat_id=user_id,
                text=text
            )
            return

    bot.send_message(
        chat_id=user_id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {user_name} üëã! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ì–°!\n"
             f"–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–Ω–æ–π /tts.\n"
             "–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–æ—Ä–æ—Ç–∏ –µ–≥–æ.",
        reply_markup=create_keyboard(["/tts"]),
    )


def is_tts_symbol_limit(message, text):
    user_id = message.from_user.id
    text_symbols = len(text)

    # –§—É–Ω–∫—Ü–∏—è –∏–∑ –ë–î –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∏–º–≤–æ–ª–æ–≤
    all_symbols = count_all_symbol(user_id) + text_symbols

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º all_symbols —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∏–º–≤–æ–ª–æ–≤
    if all_symbols >= MAX_USER_TTS_SYMBOLS:
        msg = (
            f"–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç SpeechKit TTS {MAX_USER_TTS_SYMBOLS}."
            f" –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {all_symbols} —Å–∏–º–≤–æ–ª–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {MAX_USER_TTS_SYMBOLS - all_symbols}"
        )
        bot.send_message(
            chat_id=user_id,
            text=msg
        )
        return None

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    if text_symbols >= MAX_TTS_SYMBOLS:
        msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç SpeechKit TTS –Ω–∞ –∑–∞–ø—Ä–æ—Å {MAX_TTS_SYMBOLS}, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {text_symbols} —Å–∏–º–≤–æ–ª–æ–≤"
        bot.send_message(
            chat_id=user_id,
            text=msg
        )
        return None
    return len(text)


@bot.message_handler(commands=['tts'])
def tts_handler(message):
    user_id = message.from_user.id
    bot.send_message(
        chat_id=user_id,
        text='–û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Çüí¨, —á—Ç–æ–±—ã —è –µ–≥–æ –æ–∑–≤—É—á–∏–ª!üîä'
    )
    bot.register_next_step_handler(message, tts)


def tts(message):
    user_id = message.from_user.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    if message.content_type != 'text':
        bot.send_message(
            chat_id=user_id,
            text='–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        )
        return

        # –°—á–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    text_symbol = is_tts_symbol_limit(message, text)
    if text_symbol is None:
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ë–î
    insert_row(user_id, text, text_symbol)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç SpeechKit
    status, content = text_to_speech(text)

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å True - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if status:
        bot.send_voice(
            chat_id=user_id,
            voice=content
        )
    else:
        bot.send_message(
            chat_id=user_id,
            text=content
        )


@bot.message_handler(commands=['debug'])
def send_logs(message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        try:
            with open(LOGS_PATH, "rb") as f:
                bot.send_document(
                    message.chat.id,
                    f
                )
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(
                chat_id=message.chat.id,
                text="–õ–æ–≥–æ–≤ –Ω–µ—Ç!"
            )
    else:
        print(f"{user_id} –∑–∞—Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")
        logging.info(f"{user_id} –∑–∞—Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")


@bot.message_handler(commands=['help'])
def help_command(message: Message):
    text = (
        "üëã –Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n\n"
        "–ß—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π gpt –ø–æ–º–æ—â–Ω–∏–∫–∞ üïµ‚Äç‚ôÄÔ∏è —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ .\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ YandexGPT.\n"
        "–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å gpt, "
        "–ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º)\n"
        "–ò —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ—ë —Ä–µ—à–∏—Ç—å."
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=ReplyKeyboardRemove()
    )


def filter_hello(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()


@bot.message_handler(content_types=['text'], func=filter_hello)
def say_hello(message: Message):
    user_name = message.from_user.first_name
    bot.send_message(
        chat_id=message.chat.id,
        text=f"{user_name}, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏ üëã!"
    )


def filter_bye(message):
    word = "–ø–æ–∫–∞"
    return word in message.text.lower()


@bot.message_handler(content_types=["text"], func=filter_bye)
def say_bye(message: Message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–ü–æ–∫–∞, –∑–∞—Ö–æ–¥–∏ –µ—â—ë!"
    )


@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document',
                                                               'text', 'location', 'contact', 'sticker'])
def send_echo(message: Message):
    text = (
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ({message.text}).\n"
        f"–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ªüòî, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.ü§ó"
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=text
    )


logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling(timeout=60, long_polling_timeout=5)
